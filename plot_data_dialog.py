# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PlotDataDialog
                                 A QGIS plugin
 This plugin can be used to load auv nav data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-04-10
        git sha              : $Format:%H$
        copyright            : (C) 2018 by GESMA
        email                : benoit.desrochers@ensta-bretagne.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import sys
import random

import matplotlib
# Make sure that we are using QT5
matplotlib.use('Qt5Agg')
# from PyQt5 import QtCore, QtWidgets

from numpy import arange, sin, pi
import numpy as  np
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar

from matplotlib.figure import Figure

progname = os.path.basename(sys.argv[0])
progversion = "0.1"



from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QFileDialog
from qgis.PyQt.QtCore import QSettings, QFileInfo, QStringListModel
from qgis.core import QgsFeatureRequest

from PyQt5.QtWidgets import QWidget
from PyQt5.QtWidgets import QTreeView
from PyQt5.QtWidgets import QAbstractItemView
from PyQt5.QtCore import QVariant
from PyQt5.QtGui import QStandardItemModel
from PyQt5.QtGui import QStandardItem
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QApplication
from PyQt5.QtCore import Qt


from xpftools.xpf import *

import matplotlib.pyplot as plt


FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'plot_data_dialog_base.ui'))

def lastUsedDir():
  settings = QSettings( "auvdata", "xpf" )
  return settings.value( "xpfFilename", str( "" ) )

def setLastUsedDir( lastDir ):
  # path = QFileInfo( lastDir ).absolutePath()
  settings = QSettings( "auvdata", "xpf" )
  settings.setValue( "xpfFilename", str( lastDir ) )


class Model(QStandardItemModel):
    """
    사용자 데이터 모델 설정
    [{"type":str, "objects":[str, ...]}, ...]
    """
    def __init__(self, data):
        QStandardItemModel.__init__(self)
        self._data = data
        for j, d in enumerate(data):
            item = QStandardItem(d["type"])
            for obj in d["objects"]:
                child = QStandardItem(obj)
                # child.setData(d["picture"], Qt.DecorationRole)  # Role 이름의 키 값을 가지게 될 데이터 정의
                item.appendRow(child)
            self.setItem(j, 0, item)

    def data(self, QModelIndex, role=None):
        # itemData에 인자값으로 받은 QModelIndex를 넣어주면 사전형태의 데이터 값을 돌려준다.
        data = self.itemData(QModelIndex)

        if role == Qt.DisplayRole:
            ret = data[role]
        elif role in data and role == Qt.DecorationRole:
            ret = QPixmap(data[role]).scaledToHeight(25)
        else:
            ret = QVariant()
        return ret



class PlotDataDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(PlotDataDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        plt.ion()
        self.plots = {}
        self.btn_plot.clicked.connect(self.plot)
        # self.btn_plot.clicked.connect(self.plot_dbg)

        self.btn_clean.clicked.connect(self.clean)
        self.btn_newFigure.clicked.connect(self.new_figure)

        self.figures = {}
        # self.model = QStandardItemModel()
        # self.figuresView.setModel(self.model)
        #
        # data = [
        #     {"type": "Sword", "objects": ["Long Sword", "Short Sword"], "picture": "sword.png"},
        #     {"type": "Shield", "objects": ["Wood Shield", "iron Shied"], "picture": "shield.png"},
        # ]
        # # data = {"A": []}
        # # model = QStandardItemModel
        #
        # item = QStandardItem("Figure 1")
        # for p in ["ax", 'ay', 'az']:
        #     item.appendRow(QStandardItem(p))
        # self.model.appendRow(item)
        #
        #
        #
        # # self.canvas = MyMplCanvas()
        # self.mpltoolbar = NavigationToolbar(self.canvas, self.gridLayout)
        # self.gridLayout.addWidget(self.canvas)
        # self.gridLayout.addWidget(self.mpltoolbar)
        #     # self.opendir_btn.clicked.connect(self.openFileDlg)
        # self.plotButtun.clicked.connect(self.plot)
        # self.cleanButtun.clicked.connect(self.canvas.clean)
            # self.datalog_textedit.setText(lastUsedDir())
            # self.xpfFilename = lastUsedDir()
            #
            # self.datalog_textedit.setText(self.xpfFilename)
            #
            # self.accepted.connect(self.onAccept)
            #
            # self.channelListModel =QStringListModel()
            # self.channeListView.setModel(self.channelListModel)


        # self.load_xpf_channel()
    def clean(self):
        self.figuresView.currentText()

    def add_axes(self):
        pass


    def close_evt(self, evt):
        print("close event ", evt)
        print("detail: ", evt.canvas.figure.number)
        idx = self.figuresListe.findData(evt.canvas.figure.number)
        print("remove Figure %d" % idx)
        self.figuresListe.removeItem(idx)

        items = self.figuresView.findItems("Figure %d" % evt.canvas.figure.number, Qt.MatchContains)
        print("items", items)
        for item in items:
            print("remove ", item.text())
            self.figuresView.removeItemWidget(item)
            self.figuresView.takeItem(self.figuresView.row(item))

    def new_figure(self):
        nrows = self.nrows.value()
        # figureName = self.figuresListe.currentText()
        print(nrows)
        fig, ax = plt.subplots(nrows, 1, sharex=self.sharex.isChecked())
        ax = [ax] if nrows == 1 else ax.tolist()
        print(ax)
        self.figuresListe.addItem("Figure %d" % fig.number, fig.number)
        fig.canvas.mpl_connect('close_event', self.close_evt)
        # if figureName == "":
        self.figures[fig.number] = {}
        for i in range(len(ax)):
            self.figuresView.addItem("Figure %d.%d" % (fig.number, i))
            self.figures[fig.number][i] = ax[i]
            if self.grid.isChecked():
                ax[i].grid()

    def plot_dbg(self):
        figuresStr = self.figuresView.currentItem().text()
        fig, ax = (figuresStr.split(" ")[1]).split(".")
        print(fig, ax)
        ax = self.figures[int(fig)][int(ax)]
        ax.plot(np.arange(1000), np.sin(np.arange(1000)/1000*np.pi))

    def plot(self):



        layer = self.mXFieldComboBox.layer()
        xfieldName = self.mXFieldComboBox.currentField()
        yfieldName = self.mYFieldComboBox.currentField()

        print("Xfield ", xfieldName, "Yfield", yfieldName)

        request = QgsFeatureRequest()

        # More user friendly version
        # request.setSubsetOfAttributes([xfieldName, yfieldName],layer.fields())
        # Don't return geometry objects
        request.setFlags(QgsFeatureRequest.NoGeometry)
        print("loading feature")
        pts = [ [f[xfieldName], f[yfieldName]] for f in layer.getFeatures(request)]
        print("convert to numpy")

        pts = np.asarray(pts)

        figuresStr = self.figuresView.currentItem().text()
        fig, ax = (figuresStr.split(" ")[1]).split(".")
        print(fig, ax)
        ax = self.figures[int(fig)][int(ax)]
        # ax.plot(np.arange(1000), np.sin(np.arange(1000)/1000*np.pi))
        ax.plot(pts[:,0], pts[:,1])


        # figNumber = self.figuresListe.currentData()
        #
        # plt.figure(figNumber)
        # plt.plot(pts[:,0], pts[:,1])
        # plt.plot(np.arange(1000), np.sin(10*np.arange(1000)/1000.*np.pi))

    def onAccept(self):
        print("onAccept")
        # print(self.xpfFilename[0])
        self.selectedChannel = [self.channelListModel.stringList()[p.row()] for p in self.channeListView.selectionModel().selectedIndexes()]
        self.selectedChannelNumber = [int((s.split(":")[0]).split(" ")[1]) for s in self.selectedChannel]
        print(self.selectedChannel)
        print(self.selectedChannelNumber)

        # timestamp_generator(self.xpfFilename, self.selectedChannelNumber[0])



    def load_xpf_channel(self):
        print(self.xpfFilename)
        if not (os.path.splitext(self.xpfFilename)[1] == ".xpf"):
            print(os.path.splitext(self.xpfFilename)[1])
            return False

        L = []
        with XpfReader(self.xpfFilename) as xpf:
            for key, channel in xpf.channels.items():
                L.append("Channel {}: {}".format(channel.channelId, channel.label))

        self.channelListModel.setStringList(L)
        return True

    def openFileDlg(self):

        self.xpfFilename = QFileDialog.getOpenFileName(self,'Repertoire Donnees Daurade',
                                                 os.path.dirname(self.xpfFilename),
                                                 u"ixblue (*.xpf *.dat)")

        self.xpfFilename = self.xpfFilename[0]
        if self.load_xpf_channel():
            self.datalog_textedit.setText(self.xpfFilename)
            setLastUsedDir(self.xpfFilename)




if __name__ == '__main__':
    import sys
    from PyQt5.QtWidgets import QApplication, QWidget
    from xpftools.xpf2numpy import *

    from qgis.core import *
    import qgis.utils

    # supply path to qgis install location
    QgsApplication.setPrefixPath("/path/to/qgis/installation", True)

    # create a reference to the QgsApplication, setting the
    # second argument to False disables the GUI
    qgs = QgsApplication([], False)

    # load providers
    qgs.initQgis()

    vlayer = QgsVectorLayer("/home/bdesroch/winshare/ins_postPro/20180905_insraw/R_T2018_06_05_postpro.gpkg|layername=R_T2018_06_05_postpro", "layer_name_you_like", "ogr")
    QgsProject.instance().addMapLayer(vlayer)
    # app = QApplication(sys.argv)
    dlg = PlotDataDialog(qgis.utils.iface)
    dlg.show()
    dlg.exec_()

    # w = QWidget()
    # w.resize(250, 150)
    # w.move(300, 300)
    # w.setWindowTitle('Simple')
    # w.show()

    # sys.exit(app.exec_())
    qgs.exitQgis()
